#pragma kernel SimulateParticles
#pragma kernel UserInput
#pragma kernel Projection
#pragma kernel EmptyWaterCells
#pragma kernel FillWaterCells
#pragma kernel NormalizeCellVelocity

static const int NumThreads = 64;

// buffers
//
// Staggered velocity grid:
// - v[i] tracks velocity on the left edge of i
// - u[i] tracks velocity on the bottom edge of i
//
RWStructuredBuffer<int> cellTypes;
RWStructuredBuffer<float2> cellWeights;
RWStructuredBuffer<float2> cellVelocitiesIn;
RWStructuredBuffer<float2> cellVelocitiesOut;
RWStructuredBuffer<float2> particleVelocities;
RWStructuredBuffer<float2> particlePositions;

// settings
float gravity;
float deltaTime;
float particleRadius;
float2 boundsSize;
float2 cellSize;
int2 size;
uint totalCells;
uint numParticles;

float2 interactionInputPoint;
int interactionInputType;
float interactionInputRadius;
float interactionInputStrength;

// fluid sim constants
static const float overRelaxation = 1.9;

// cell type constants
static const int AIR_CELL = 0;
static const int TERRAIN_CELL = 1;
static const int STONE_CELL = 2;
static const int WATER_CELL = 3;

//
// helpers to work with coordinates
//
uint idToCol(const uint id)
{
    return id % size.x;
}

uint idToRow(const uint id)
{
    return id / size.x;
}

uint idx(const uint x, const uint y)
{
    return y * size.x + x;
}

float2 gridPosition(const uint col, const uint row)
{
    const float2 boundCorner = -boundsSize / 2;
    return boundCorner + (float2(col, row) + 0.5) * cellSize;
}

uint2 cellContaining(const float2 pos)
{
    uint col = clamp(floor(pos.x), 0, size.x - 1);
    uint row = clamp(floor(pos.y), 0, size.y - 1);
    return uint2(col, row);
}

uint2 clampCell(const uint2 pos)
{
    const uint2 lowerLeft = uint2(1, 1);
    const uint2 upperRight = uint2(size.x - 1, size.y - 1);
    return clamp(pos, lowerLeft, upperRight);
}

bool isSolidCell(const uint id)
{
    return cellTypes[id] == TERRAIN_CELL || cellTypes[id] == STONE_CELL;
}

//
// fluid sim functions
//

void integrateParticle(uint id)
{
    // apply gravity
    particleVelocities[id.x] += deltaTime * float2(0, gravity);

    // apply velocities
    particlePositions[id.x] += particleVelocities[id.x] * deltaTime;
}

void handleParticleCollision(uint id)
{
    float2 pos = particlePositions[id];

    // handle wall collisions
    const float minX = particleRadius + 1;
    const float maxX = size.x - particleRadius - 1;
    const float minY = particleRadius + 1;
    const float maxY = size.y - particleRadius - 1;
    
    if (pos.x < minX)
    {
        pos.x = minX;
        particleVelocities[id].x = 0;
    }

    if (pos.x > maxX)
    {
        pos.x = maxX;
        particleVelocities[id].x = 0;
    }

    if (pos.y < minY)
    {
        pos.y = minY;
        particleVelocities[id].y = 0;
    }

    if (pos.y > maxY)
    {
        pos.y = maxY;
        particleVelocities[id].y = 0;
    }

    particlePositions[id] = pos;
}

//
// kernels
//

[numthreads(NumThreads, 1, 1)]
void SimulateParticles(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    integrateParticle(id.x);
    handleParticleCollision(id.x);
}

[numthreads(NumThreads, 1, 1)]
void UserInput(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= totalCells) return;

    // copy values to ensure no data loss
    cellVelocitiesOut[id.x] = cellVelocitiesIn[id.x];
    
    // exit if cell is on border
    const int row = idToRow(id.x);
    const int col = idToCol(id.x);
    if (row == 0 || col == 0 || row == size.y - 1 || col == size.x - 1) return;

    // ensure cell is within interaction radius
    const float2 pos = gridPosition(col, row);
    const float2 offset = interactionInputPoint - pos;
    const float sqrDst = dot(offset, offset);
    if (sqrDst > interactionInputRadius * interactionInputRadius) return;
    
    // clear destructible terrain
    if (cellTypes[id.x] == 1 && interactionInputType == 2)
    {
        cellTypes[id.x] = 0;
    }
    // influence velocity field
    else if (cellTypes[id.x] == 0 && interactionInputType == 1)
    {
        // const float dist = sqrt(sqrDst);
        // const float pullStrength = (dist / interactionInputRadius) * interactionInputStrength;
        cellVelocitiesOut[id.x] = cellVelocitiesIn[id.x] + 0.1f;
    }
}

[numthreads(NumThreads, 1, 1)]
void Projection(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= totalCells) return;
    
    // copy values to ensure no data loss
    cellVelocitiesOut[id.x] = cellVelocitiesIn[id.x];

    // exit if not water cell
    if (cellTypes[id.x] != WATER_CELL) return;

    // exit if it is on a bound
    const int col = idToCol(id.x);
    const int row = idToRow(id.x);
    if (row == 0 || row == size.y-1 || col == 0 || col == size.x-1) return;

    // get neighbor indices for ease
    const int center = id.x;
    const int left = id.x - 1;
    const int right = id.x + 1;
    const int up = id.x + size.x;
    const int down = id.x - size.x;
    
    // check cell types
    const int sLeft = !isSolidCell(left) ? 1 : 0;
    const int sRight = !isSolidCell(right) ? 1 : 0;
    const int sUp = !isSolidCell(up) ? 1 : 0;
    const int sDown = !isSolidCell(down) ? 1 : 0;
    const int s = sLeft + sRight + sUp + sDown;
    if (s == 0) return;
    
    // compute divergence
    float d = cellVelocitiesIn[right].x - cellVelocitiesIn[center].x + cellVelocitiesIn[up].y - cellVelocitiesIn[center].y;
    d *= overRelaxation / s;

    // solve incompressibility
    cellVelocitiesOut[center].x = cellVelocitiesIn[center].x - d * sLeft;
    cellVelocitiesOut[right].x = cellVelocitiesIn[right].x + d * sRight;
    cellVelocitiesOut[center].y = cellVelocitiesIn[center].y - d * sDown;
    cellVelocitiesOut[up].y = cellVelocitiesIn[up].y + d * sUp;
}

[numthreads(NumThreads, 1, 1)]
void EmptyWaterCells(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= totalCells) return;

    if (cellTypes[id.x] == WATER_CELL)
        cellTypes[id.x] = AIR_CELL;

    cellWeights[id.x] = 0;
    cellVelocitiesIn[id.x] = cellVelocitiesOut[id.x];
    cellVelocitiesOut[id.x] = 0;
}

[numthreads(NumThreads, 1, 1)]
void FillWaterCells(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= numParticles) return;

    const float2 pos = particlePositions[id.x];
    const uint2 cellPos = cellContaining(pos);
    const uint cellIdx = idx(cellPos.x, cellPos.y);
    if (cellTypes[cellIdx] == AIR_CELL)
        cellTypes[cellIdx] = WATER_CELL;
}

[numthreads(NumThreads, 1, 1)]
void NormalizeCellVelocity(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= totalCells) return;

    // note: keep cell velocity in the same as it was before particle->grid velocity transfer
    // this way we can restore velocity for solid cells
    if (cellWeights[id.x].x > 0)
        cellVelocitiesOut[id.x].x /= cellWeights[id.x].x;
    if (cellWeights[id.x].y > 0)
        cellVelocitiesOut[id.x].y /= cellWeights[id.x].y;

    // restore velocity for solid cells
    const uint col = idToCol(id.x);
    const uint row = idToRow(id.x);
    const bool isSolid = isSolidCell(id.x);
    const bool leftIsSolid = col > 0 && isSolidCell(id.x - 1);
    const bool bottomIsSolid = row > 0 && isSolidCell(id.x - size.x);

    if (isSolid || leftIsSolid)
        cellVelocitiesOut[id.x].x = cellVelocitiesIn[id.x].x;
    if (isSolid || bottomIsSolid)
        cellVelocitiesOut[id.x].y = cellVelocitiesIn[id.x].y;
}
