// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Edit

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float> Distance;

int width;
int height;

float interaction_radius;

float2 lastMousePos;
float2 mousePos;

[numthreads(8,8,1)]
void Edit (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= (uint)width || id.y >= (uint)height) return;

    const float2 c = float2(id.xy);

    // no previous mouse position
    if (lastMousePos.x == -100 && lastMousePos.y == -100)
    {
        const float r = distance(mousePos, c);
        Distance[id.xy] = max(Distance[id.xy], interaction_radius - r);
    }
    else
    {
        // find the line between last and current mouse pos
        const float2 a = lastMousePos;
        const float2 b = mousePos;
        const float2 ab = b - a;
        
        // project current pixel onto line
        const float2 ac = c - a;
        const float l = length(ab);
        const float t = dot(ab, ac) / l;
        const float2 d = a + ab * t / l;
        
        float r = interaction_radius;
        
        // compute relevant radius
        if (t < 0)
            r = distance(a, c);
        else if (t > l)
            r = distance(b, c);
        else
            r = distance(d, c);
        
        Distance[id.xy] = max(Distance[id.xy], interaction_radius - r);
    }
}
